# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# :=0 --> UPnP support turned off by default at runtime
# :=1 --> UPnP support turned on by default at runtime
# :=- --> No UPnP support - miniupnp not required
USE_UPNP:=0

# :=1 --> Enable IPv6 support
# :=0 --> Disable IPv6 support
USE_IPV6:=1

LINK:=$(CXX)

DEFS=-DBOOST_SPIRIT_THREADSAFE -D_FILE_OFFSET_BITS=64

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
else
	TESTDEFS += -DBOOST_TEST_DYN_LINK
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto

TESTLIBS += \
 -Wl,-B$(LMODE) \
   -l boost_unit_test_framework$(BOOST_LIB_SUFFIX)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE
        LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

HEADERS = $(wildcard *.h) \
          $(wildcard minizip/*.h) \
		  $(wildcard functions_hook/*.h) \
		  $(wildcard functions_hook/subhook/*.h) \
		  $(wildcard functions_hook/polyhook_lib/Capstone/*.h) \
		  $(wildcard functions_hook/polyhook_lib/Capstone/arch/*.h)
		  
OBJS= \
    leveldb/libleveldb.a \
	obj/windows_platform_defs.o \
	obj/trees.o \
	obj/zutil.o \
	obj/inffast.o \
	obj/infback.o \
	obj/inftrees.o \
	obj/adler32.o \
    obj/inflate.o \
    obj/deflate.o \
    obj/crc32.o \
    obj/ioapi.o \
    obj/mztools.o \
	obj/iowin32.o \
	obj/unzip.o \
	obj/zip.o \
	obj/miniunz.o \
	obj/minizip.o \
	obj/utils.o \
    obj/MCInst.o \
    obj/MCInstrDesc.o \
    obj/MCRegisterInfo.o \
    obj/SStream.o \
	obj/CommonBaseInfo.o \
	obj/CommonDisassembler.o \
	obj/CommonDisassemblerDecoder.o \
	obj/CommonATTInstPrinter.o \
	obj/CommonInstPrinter.o \
	obj/CommonIntelInstPrinter.o \
	obj/CommonMapping.o \
	obj/CommonMCTargetDesc.o \
	obj/CommonModule.o \
	obj/cs.o \
	obj/mhook_platform_defs.o \
	obj/convert_functions.o \
	obj/base64.o \
	obj/random.o \
	obj/base_security.o \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/hash.o \
    obj/bloom.o \
    obj/noui.o \
    obj/leveldb.o \
    obj/txdb.o\
    obj/blake.o\
    obj/bmw.o\
    obj/groestl.o\
    obj/jh.o\
    obj/keccak.o\
    obj/skein.o

	


all: bitcrystald

test check: test_bitcrystald FORCE
	./test_bitcrystal

#
# LevelDB support
#
MAKEOVERRIDES =
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(xCXXFLAGS)" libleveldb.a libmemenv.a && cd ..

# auto-generated dependencies:
-include obj/*.P
-include obj-test/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.c
	$(CXX) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)
	  
obj/trees.o: minizip/trees.c minizip/trees.h
	gcc -c -o obj/trees.o minizip/trees.c
	
obj/adler32.o: minizip/adler32.c
	gcc -c -o obj/adler32.o minizip/adler32.c	

obj/zutil.o: minizip/zutil.c minizip/zutil.h
	gcc -c -o obj/zutil.o minizip/zutil.c
	
obj/infback.o: minizip/infback.c
	gcc -c -o obj/infback.o minizip/infback.c
	
obj/inffast.o: minizip/inffast.c minizip/inffast.h
	gcc -c -o obj/inffast.o minizip/inffast.c
	
obj/inftrees.o: minizip/inftrees.c minizip/inftrees.h
	gcc -c -o obj/inftrees.o minizip/inftrees.c
	
obj/deflate.o: minizip/deflate.c minizip/deflate.h
	gcc -c -o obj/deflate.o minizip/deflate.c
	
obj/inflate.o: minizip/inflate.c minizip/inflate.h
	gcc -c -o obj/inflate.o minizip/inflate.c
	
obj/crc32.o: minizip/crc32.c minizip/crc32.h
	gcc -c -o obj/crc32.o minizip/crc32.c
	
obj/ioapi.o: minizip/ioapi.c minizip/ioapi.h
	gcc -c -o obj/ioapi.o minizip/ioapi.c

obj/mztools.o: minizip/mztools.c minizip/mztools.h
	gcc -c -o obj/mztools.o minizip/mztools.c
	
obj/iowin32.o: minizip/iowin32.c minizip/iowin32.h
	gcc -c -o obj/iowin32.o minizip/iowin32.c
	
obj/unzip.o: minizip/unzip.c minizip/unzip.h
	gcc -c -o obj/unzip.o minizip/unzip.c
	
obj/zip.o: minizip/zip.c minizip/zip.h
	gcc -c -o obj/zip.o minizip/zip.c
	
obj/miniunz.o: minizip/miniunz.c minizip/miniunz.h
	gcc -c -o obj/miniunz.o minizip/miniunz.c

obj/minizip.o: minizip/minizip.c minizip/minizip.h
	gcc -c -o obj/minizip.o minizip/minizip.c

obj/utils.o: functions_hook/polyhook_lib/Capstone/my_utils.c functions_hook/polyhook_lib/Capstone/my_utils.h
	gcc -c -o obj/utils.o functions_hook/polyhook_lib/Capstone/my_utils.c
	
obj/MCInst.o: functions_hook/polyhook_lib/Capstone/my_MCInst.c functions_hook/polyhook_lib/Capstone/my_MCInst.h
	gcc -c -o obj/MCInst.o functions_hook/polyhook_lib/Capstone/my_MCInst.c

obj/MCInstrDesc.o: functions_hook/polyhook_lib/Capstone/my_MCInstrDesc.c functions_hook/polyhook_lib/Capstone/my_MCInstrDesc.h
	gcc -c -o obj/MCInstrDesc.o functions_hook/polyhook_lib/Capstone/my_MCInstrDesc.c
	
obj/MCRegisterInfo.o: functions_hook/polyhook_lib/Capstone/my_MCRegisterInfo.c functions_hook/polyhook_lib/Capstone/my_MCRegisterInfo.h
	gcc -c -o obj/MCRegisterInfo.o functions_hook/polyhook_lib/Capstone/my_MCRegisterInfo.c
	
obj/SStream.o: functions_hook/polyhook_lib/Capstone/my_SStream.c functions_hook/polyhook_lib/Capstone/my_SStream.h
	gcc -c -o obj/SStream.o functions_hook/polyhook_lib/Capstone/my_SStream.c
	
obj/CommonBaseInfo.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonBaseInfo.c functions_hook/polyhook_lib/Capstone/arch/my_CommonBaseInfo.h
	gcc -c -o obj/CommonBaseInfo.o functions_hook/polyhook_lib/Capstone/arch/my_CommonBaseInfo.c
	
obj/CommonDisassembler.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonDisassembler.c functions_hook/polyhook_lib/Capstone/arch/my_CommonDisassembler.h
	gcc -c -o obj/CommonDisassembler.o functions_hook/polyhook_lib/Capstone/arch/my_CommonDisassembler.c
	
obj/CommonDisassemblerDecoder.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonDisassemblerDecoder.c functions_hook/polyhook_lib/Capstone/arch/my_CommonDisassemblerDecoder.h
	gcc -c -o obj/CommonDisassemblerDecoder.o functions_hook/polyhook_lib/Capstone/arch/my_CommonDisassemblerDecoder.c
	
obj/CommonATTInstPrinter.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonATTInstPrinter.c functions_hook/polyhook_lib/Capstone/arch/my_CommonATTInstPrinter.h
	gcc -c -o obj/CommonATTInstPrinter.o functions_hook/polyhook_lib/Capstone/arch/my_CommonATTInstPrinter.c
	
obj/CommonInstPrinter.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonInstPrinter.c functions_hook/polyhook_lib/Capstone/arch/my_CommonInstPrinter.h
	gcc -c -o obj/CommonInstPrinter.o functions_hook/polyhook_lib/Capstone/arch/my_CommonInstPrinter.c
	
obj/CommonIntelInstPrinter.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonIntelInstPrinter.c functions_hook/polyhook_lib/Capstone/arch/my_CommonIntelInstPrinter.h
	gcc -c -o obj/CommonIntelInstPrinter.o functions_hook/polyhook_lib/Capstone/arch/my_CommonIntelInstPrinter.c
	
obj/CommonMapping.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonMapping.c functions_hook/polyhook_lib/Capstone/arch/my_CommonMapping.h
	gcc -c -o obj/CommonMapping.o functions_hook/polyhook_lib/Capstone/arch/my_CommonMapping.c
	
obj/CommonMCTargetDesc.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonMCTargetDesc.c functions_hook/polyhook_lib/Capstone/arch/my_CommonMCTargetDesc.h
	gcc -c -o obj/CommonMCTargetDesc.o functions_hook/polyhook_lib/Capstone/arch/my_CommonMCTargetDesc.c
	
obj/CommonModule.o: functions_hook/polyhook_lib/Capstone/arch/my_CommonModule.c functions_hook/polyhook_lib/Capstone/arch/my_CommonModule.h
	gcc -c -o obj/CommonModule.o functions_hook/polyhook_lib/Capstone/arch/my_CommonModule.c
	
obj/cs.o: functions_hook/polyhook_lib/Capstone/my_cs.c functions_hook/polyhook_lib/Capstone/my_cs.h
	gcc -c -o obj/cs.o functions_hook/polyhook_lib/Capstone/my_cs.c

obj/windows_platform_defs.o: functions_hook/subhook/windows_platform_defs.c functions_hook/subhook/windows_platform_defs.h
	gcc -c -o obj/windows_platform_defs.o functions_hook/subhook/windows_platform_defs.c
	
obj/mhook_platform_defs.o: functions_hook/mhook_platform_defs.c functions_hook/mhook_platform_defs.h
	gcc -c -o obj/mhook_platform_defs.o functions_hook/mhook_platform_defs.c

bitcrystald: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp
	$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

test_bitcrystalrare: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	$(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS)

clean:
	-rm -f bitcrystald test_bitcrystal
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/build.h
	-cd leveldb && $(MAKE) clean || true

FORCE:
